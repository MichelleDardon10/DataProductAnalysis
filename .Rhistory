slice(1)
install.packages("maps")
install.packages("maps")
# Instalar la biblioteca maps
install.packages("maps")
# Cargar la biblioteca maps
library(maps)
View(data)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
earthQuakeData <- read.csv("C:/Users/miche/OneDrive/Escritorio/DATA PRODUCT/flexdashboards/data/earthquakedata.csv")
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
earthQuakeData <- read.csv("C:/Users/miche/OneDrive/Escritorio/DATA PRODUCT/flexdashboards/data/earthquakedata.csv")
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
earthQuakeData <- read.csv("C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/flexdashboards/data/earthquakedata.csv")
earthQuakeData %>%
filter(yr == 1995) %>%
DT::datatable()
earthQuakeData %>%
filter(yr == 1995) %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng=~lon,
lat=~lat,
label = ~mag)
data_share <- SharedData$new(earthQuakeData %>% filter(yr > 2000))
filter_slider("mag","Magnitud", data_share, step = 0.1,width = 250, column = ~mag)
filter_select("yr","AÃ±o",data_share, group = ~yr, multiple = TRUE)
data_share %>%
DT::datatable()
data_share %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng=~lon,
lat=~lat,)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
show_col_types = FALSE
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
show_col_types = FALSE
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
head(data$Profit)
head(data$Profit;)
head(data$`Profit;`)
Profit <- (data$`Profit;`)
head(Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(Profit)
head(Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(ProductName)
data$Profit <- as.numeric(data$Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(ProductName) #prueba de que si funciona
data$Profit <- as.numeric(data$Profit)
Profit <- as.numeric(data$Profit)
profit_by_state <- data %>%
group_by(State, ProductName) %>%
summarise(Total.Profit = sum(Profits, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total.Profit)) %>%
slice(1)
Profit <- as.numeric(data$Profit)
head(Profit)
Profit <- as.numeric(data$Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(ProductName) #prueba de que si funciona
Profit <- as.numeric(data$Profit)
Profit <- as.numeric(Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(ProductName) #prueba de que si funciona
data$Profit <- as.numeric(Profit)
head(data$Profit)
data <- data %>%
filter(!is.na(State) & !is.na('Product Name'))
Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
head(Profit) #prueba de que si funciona
ProductName <- (data$`Product Name`)
head(ProductName) #prueba de que si funciona
data$Profit <- as.numeric(Profit)
head(data$Profit)
data <- data %>%
filter(!is.na(Profit))
head(data$Profit)
data <- data %>%
filter(!is.na(data$Profit))
head(data$Profit)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data <- data %>%
filter(!is.na(State) | !is.na('Product Name'))
data$Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
data$ProductName <- (data$`Product Name`)
head(data$ProductName) #prueba de que si funciona
data$Profit <- as.numeric(Profit)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data <- data %>%
filter(!is.na(State) | !is.na('Product Name'))
data$Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
data$ProductName <- (data$`Product Name`)
head(data$ProductName) #prueba de que si funciona
data$Profit <- as.numeric(data$Profit)
head(data$Profit)
data <- data %>%
filter(!is.na(data$Profit))
head(data$Profit)
View(data)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data$Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
data$ProductName <- (data$`Product Name`)
head(data$ProductName) #prueba de que si funciona
data$Profit <- as.numeric(data$Profit)
head(data$Profit)
data <- data %>%
filter(!is.na(data$Profit))
head(data$Profit)
View(data)
data$Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
data$ProductName <- (data$`Product Name`)
data$Profit <- as.numeric(data$Profit)
data <- data %>%
filter(!is.na(data$Profit))
head(data$Profit)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data$Profit <- (data$`Profit;`) #para arreglar problema de nombre con ; al final
data$ProductName <- (data$`Product Name`)
data$Profit <- as.numeric(data$Profit)
data <- data %>%
filter(!is.na(data$Profit))
head(data$Profit)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data$Profit <- (data$`Profit;`)
data$ProductName <- (data$`Product Name`)
data <- data %>%
filter(!is.na(data$Profit))
data$Profit <- as.numeric(data$Profit)
head(data$Profit)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data$ProductName <- (data$`Product Name`)
data <- data %>%
filter(!is.na(data$`Profit;`))
data$Profit <- as.numeric(data$`Profit;`)
head(data$Profit)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data$ProductName <- (data$`Product Name`)
data <- data %>%
filter(!is.na(data$`Profit;`))
data$Profit <- as.numeric(gsub("[^0-9.-]", "", data$`Profit;`))
head(data$Profit)
profit_by_state <- data %>%
group_by(data$State, data$ProductName) %>%
summarise(Total.Profit = sum(data$Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total.Profit)) %>%
slice(1)
head(profit_by_state)
View(data)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(df$Order_Date, format="%m/%d/%Y")
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- data$Ship_Date - data$Order_Date
head(data$Time_Difference)
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
head(data$Time_Difference)
data <- data[!is.na(data$Time_Difference), ]
# View the result
print(data)
data <- data[!is.na(data$Time_Difference), ]
head(data$Time_Difference)
efficiency_by_state <- data %>%
group_by(data$State, data$Time_Difference) %>%
arrange(desc(data$Time_Difference)) %>%
slice(1)
head(efficiency_by_state)
efficiency_by_state <- data %>%
group_by(data$State) %>%
arrange(desc(data$Time_Difference)) %>%
slice(1)
head(efficiency_by_state)
library(knitr)
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(data$State) %>%
arrange(desc(data$Time_Difference)) %>%
slice(1)
kable(efficiency_by_state)
kable(efficiency_by_state)
kable(efficiency_by_state)
kable(efficiency_by_state)
kable(efficiency_by_state)
data <- data %>%
mutate(across(where(is.character), ~iconv(., from = "latin1", to = "UTF-8")))
kable(efficiency_by_state)
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference)
# Display the result
datatable(efficiency_by_state)
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, desc(Time_Difference))
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State,desc(Time_Difference))
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference)
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Display the result
datatable(efficiency_by_state)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
# Map state names to the polygon data
states_map <- map_data("state")
efficiency_by_state$region <- tolower(efficiency_by_state$State)
# Get map data for U.S. states
states_map <- map_data("state")
library(ggplot2)
efficiency_by_state$region <- tolower(efficiency_by_state$State)
# Get map data for U.S. states
states_map <- map_data("state")
# Join the state map data with efficiency data
states_map <- left_join(states_map, efficiency_by_state, by = "region")
# Join the state map data with efficiency data
states_map <- left_join(states_map, efficiency_by_state, by = "region")
leaflet(data = states_map) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Time_Difference)(Time_Difference),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, "<br>Time Difference: ", Time_Difference),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = colorNumeric("YlOrRd", NULL), values = ~Time_Difference, opacity = 0.7, title = "Efficiency by State", position = "bottomright")
efficiency_by_state$region <- tolower(efficiency_by_state$State)
states_map <- map_data("state")
states_map$region <- tolower(states_map$region)
map_data <- left_join(states_map, efficiency_by_state, by = "region")
# Create the interactive map
leaflet(data = map_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Time_Difference)(Time_Difference),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
),
label = ~paste(region, "<br>Time Difference: ", Time_Difference),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"
)
) %>%
addLegend(pal = colorNumeric("YlOrRd", map_data$Time_Difference),
values = map_data$Time_Difference,
opacity = 0.7,
title = "Efficiency by State",
position = "bottomright")
library(ggplot2)
# Retrieve map data for U.S. states
states_map <- map("state", fill = TRUE, plot = FALSE)
# Convert the map data to a data frame
states_map_df <- map2SpatialPolygons(states_map, IDs = states_map$names)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
library(ggplot2)
library(tidygeocoder)
install.packages("tidygeocoder")
install.packages('tidygeocoder')
install.packages(tidygeocoder)
install.packages("tidygeocoder")
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
data <- read_csv("tienda (1).csv")
state_map <- map_data("state")
state_map <- map_data("state")
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Display the result
datatable(efficiency_by_state)
```
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Display the result
datatable(efficiency_by_state)
state_map <- map_data("state")
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Load US state map data
state_map <- map_data("state")
