gg_map <- ggplot(data = merged_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Time_Difference,
text = paste("State:", region, "<br>Time Difference:", Time_Difference)),
color = "black") +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Shipping Efficiency by State", fill = "Days") +
theme(legend.position = "bottom")
# Convert ggplot to an interactive plotly object
interactive_map <- ggplotly(gg_map, tooltip = "text")
# Display the interactive map
interactive_map
#MINUSCULAS
profit_by_state <- data %>%
mutate(State = tolower(State))
# CARGAR MAPA Y RENOMBRAR
state_map2 <- map_data("state")
state_map2 <- state_map2 %>%
rename(State = region)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
# CREAR MAPA
gg_map <- ggplot(data = state_map) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# Mostrar el mapa interactivo
interactive_map2
View(profit_with_coords)
# CREAR MAPA
gg_map <- ggplot(data = profit_with_coords) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# Mostrar el mapa interactivo
interactive_map2
# CREAR MAPA
gg_map <- ggplot(data = state_map) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# Convertir ggplot a un objeto interactivo plotly
interactive_map2 <- ggplotly(gg_map, tooltip = "text")
# Mostrar el mapa interactivo
interactive_map2
# CREAR MAPA
gg_map2 <- ggplot(data = state_map) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# CREAR MAPA
gg_map2 <- ggplot(data = state_map) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# Convertir ggplot a un objeto interactivo plotly
interactive_map2 <- ggplotly(gg_map2, tooltip = "text")
# Mostrar el mapa interactivo
interactive_map2
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
library(mapdata)
library(ggplot2)
library(plotly)
library(viridis)
data <- read_csv("tienda (1).csv")
# CREAR MAPA
gg_map2 <- ggplot(data = state_map2) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# Convertir ggplot a un objeto interactivo plotly
interactive_map2 <- ggplotly(gg_map2, tooltip = "text")
# Mostrar el mapa interactivo
interactive_map2
gg_map_simple <- ggplot(data = state_map2) +
geom_polygon(aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
coord_fixed(1.3) +
theme_minimal()
# Mostrar el mapa simple
print(gg_map_simple)
gg_map2 <- ggplot(data = profit_with_coords) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit),
color = "black") +
scale_fill_viridis_c() +
coord_fixed(1.3) +  # Mantener las proporciones del mapa
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit")
# Mostrar el mapa coloreado por `Total_Profit`
print(gg_map2)
(sum(is.na(profit_with_coords$Total_Profit))
print((sum(is.na(profit_with_coords$Total_Profit)))
print(sum(is.na(profit_with_coords$Total_Profit)))
print(sum(is.na(profit_with_coords$long)))
print(sum(is.na(profit_with_coords$lat)))
print(head(profit_with_coords))
profit_with_coords_clean <- profit_with_coords %>%
filter(!is.na(Total_Profit), !is.na(long), !is.na(lat))
# Crear un mapa básico nuevamente con coloración
gg_map <- ggplot(data = profit_with_coords_clean) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit),
color = "black") +
scale_fill_viridis_c() +
coord_fixed(1.3) +  # Mantener las proporciones del mapa
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit")
# Mostrar el mapa
print(gg_map)
# Crear un mapa básico nuevamente con coloración
gg_map <- ggplot(data = profit_with_coords_clean) +
geom_point(aes(x = long, y = lat, color = Total_Profit), size = 3) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", color = "Profit")
# Mostrar el mapa de puntos
print(gg_map)
# Unir state_map con profit_with_coords para asegurarse de que todo se alinee bien
combined_data <- left_join(state_map, profit_with_coords_clean, by = "State")
profit_with_coords_clean <- profit_with_coords %>%
filter(!is.na(Total_Profit), !is.na(long), !is.na(lat))
# Unir state_map con profit_with_coords para asegurarse de que todo se alinee bien
combined_data <- left_join(state_map, profit_with_coords_clean, by = "State")
# Unir state_map con profit_with_coords para asegurarse de que todo se alinee bien
combined_data <- left_join(state_map2, profit_with_coords_clean, by = "State")
# Verificar las primeras filas del dataframe combinado
print(head(combined_data))
# Dibujar el mapa con los datos combinados
gg_map_combined <- ggplot(data = combined_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit),
color = "black") +
scale_fill_viridis_c() +
coord_fixed(1.3) +  # Mantener las proporciones del mapa
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit")
# Mostrar el mapa combinado
print(gg_map_combined)
View(gg_map_combined)
View(combined_data)
profit_with_coords_clean <- profit_with_coords %>%
filter(!is.na(Total_Profit), !is.na(long), !is.na(lat))
#### SOLO TIRA PUNTOS
# Crear un mapa básico nuevamente con coloración
gg_map <- ggplot(data = profit_with_coords_clean) +
geom_point(aes(x = long, y = lat, color = Total_Profit), size = 3) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", color = "Profit")
# Mostrar el mapa de puntos
print(gg_map)
gg_map_base <- ggplot(data = state_map2) +
geom_polygon(aes(x = long, y = lat, group = group), color = "black", fill = "white") +
coord_fixed(1.3) +  # Mantener las proporciones del mapa
theme_minimal() +
labs(title = "Map of the United States")
# Mostrar el mapa base
print(gg_map_base)
# CREAR MAPA
gg_map2 <- ggplot(data = state_map2) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit,
text = paste("State:", State, "<br>Total Profit:", Total_Profit)),
color = "black", data = profit_with_coords) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit") +
theme(legend.position = "bottom")
# Convertir ggplot a un objeto interactivo plotly
interactive_map2 <- ggplotly(gg_map2, tooltip = "text")
profit_with_coords_clean <- profit_with_coords %>%
filter(!is.na(Total_Profit), !is.na(long), !is.na(lat))
gg_map_base <- ggplot(data = state_map2) +
geom_polygon(aes(x = long, y = lat, group = group), color = "black", fill = "white") +
coord_fixed(1.3) +  # Mantener las proporciones del mapa
theme_minimal() +
labs(title = "Map of the United States")
# Mostrar el mapa base
print(gg_map_base)
#### SOLO TIRA PUNTOS
# Crear un mapa básico nuevamente con coloración
gg_map <- ggplot(data = profit_with_coords_clean) +
geom_point(aes(x = long, y = lat, color = Total_Profit), size = 3) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", color = "Profit")
# Mostrar el mapa de puntos
print(gg_map)
combined_data <- left_join(state_map, profit_with_coords_clean, by = "State")
combined_data <- left_join(state_map2, profit_with_coords_clean, by = "State")
# Verificar las primeras filas del dataframe combinado
print(head(combined_data))
# Dibujar el mapa con los datos combinados
gg_map_combined <- ggplot(data = combined_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Total_Profit),
color = "black") +
scale_fill_viridis_c() +
coord_fixed(1.3) +  # Mantener las proporciones del mapa
theme_minimal() +
labs(title = "Total Profit by State", fill = "Profit")
# Mostrar el mapa combinado
print(gg_map_combined)
print(head(combined_data))
head(combined_data)
#MINUSCULAS
profit_by_state <- data %>%
mutate(State = tolower(State))
# CARGAR MAPA Y RENOMBRAR
state_map2 <- map_data("state")
state_map2 <- state_map2 %>%
rename(State = region)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
View(profit_with_coords_clean)
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
#MINUSCULAS
profit_by_state <- data %>%
mutate(State = tolower(State))
# CARGAR MAPA Y RENOMBRAR
state_map <- map_data("state")
state_map <- state_map %>%
rename(State = region)
# NUEVA DATA
state_coords <- state_map %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
View(profit_with_coords)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
library(mapdata)
library(ggplot2)
library(plotly)
library(viridis)
data <- read_csv("tienda (1).csv")
data$ProductName <- (data$`Product Name`)
data <- data %>%
filter(!is.na(data$`Profit;`))
data$Profit <- as.numeric(gsub("[^0-9.-]", "", data$`Profit;`))
profit_by_state <- data %>%
group_by(data$State, data$ProductName) %>%
summarise(Total.Profit = sum(data$Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total.Profit)) %>%
slice(1)
head(profit_by_state)
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Display the result
datatable(efficiency_by_state)
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Load US state map data
state_map <- map_data("state")
# Convert state names to lowercase to match the `state_map` format
efficiency_by_state <- efficiency_by_state %>%
mutate(State = tolower(State))
# Merge with map data
merged_data <- left_join(state_map, efficiency_by_state, by = c("region" = "State"))
gg_map <- ggplot(data = merged_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Time_Difference,
text = paste("State:", region, "<br>Time Difference:", Time_Difference)),
color = "black") +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Shipping Efficiency by State", fill = "Days") +
theme(legend.position = "bottom")
# Convert ggplot to an interactive plotly object
interactive_map <- ggplotly(gg_map, tooltip = "text")
# Display the interactive map
interactive_map
#MINUSCULAS
profit_by_state <- data %>%
mutate(State = tolower(State))
# CARGAR MAPA Y RENOMBRAR
state_map2 <- map_data("state")
state_map2 <- state_map2 %>%
rename(State = region)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
View(state_coords)
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
View(profit_with_coords)
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group)
View(profit_by_state)
View(profit_with_coords)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
View(profit_with_coords)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
View(profit_with_coords)
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
library(mapdata)
library(ggplot2)
library(plotly)
library(viridis)
data <- read_csv("tienda (1).csv")
#MINUSCULAS
profit_by_state <- data %>%
mutate(State = tolower(State))
# CARGAR MAPA Y RENOMBRAR
state_map2 <- map_data("state")
state_map2 <- state_map2 %>%
rename(State = region)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
library(maps)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(crosstalk)
library(DT)
library(mapdata)
library(ggplot2)
library(plotly)
library(viridis)
data <- read_csv("tienda (1).csv")
data$ProductName <- (data$`Product Name`)
data <- data %>%
filter(!is.na(data$`Profit;`))
data$Profit <- as.numeric(gsub("[^0-9.-]", "", data$`Profit;`))
profit_by_state <- data %>%
group_by(data$State, data$ProductName) %>%
summarise(Total.Profit = sum(data$Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total.Profit)) %>%
slice(1)
head(profit_by_state)
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Display the result
datatable(efficiency_by_state)
data$Order_Date <- data$`Order Date`
data$Ship_Date <- data$`Ship Date`
data$Order_Date <- as.Date(data$Order_Date, format="%m/%d/%Y")
data$Ship_Date <- as.Date(data$Ship_Date, format="%m/%d/%Y")
data$Time_Difference <- as.numeric(data$Ship_Date - data$Order_Date)
data <- data[!is.na(data$Time_Difference), ]
efficiency_by_state <- data %>%
group_by(State) %>%
arrange(desc(Time_Difference)) %>%
slice(1) %>%
select(State, Time_Difference) %>%
arrange(desc(Time_Difference))
# Load US state map data
state_map <- map_data("state")
# Convert state names to lowercase to match the `state_map` format
efficiency_by_state <- efficiency_by_state %>%
mutate(State = tolower(State))
# Merge with map data
merged_data <- left_join(state_map, efficiency_by_state, by = c("region" = "State"))
gg_map <- ggplot(data = merged_data) +
geom_polygon(aes(x = long, y = lat, group = group, fill = Time_Difference,
text = paste("State:", region, "<br>Time Difference:", Time_Difference)),
color = "black") +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Shipping Efficiency by State", fill = "Days") +
theme(legend.position = "bottom")
# Convert ggplot to an interactive plotly object
interactive_map <- ggplotly(gg_map, tooltip = "text")
# Convert ggplot to an interactive plotly object
interactive_map <- ggplotly(gg_map, tooltip = "text")
# Display the interactive map
interactive_map
#MINUSCULAS
profit_by_state <- data %>%
mutate(State = tolower(State))
# CARGAR MAPA Y RENOMBRAR
state_map2 <- map_data("state")
state_map2 <- state_map2 %>%
rename(State = region)
# NUEVA DATA
state_coords <- state_map2 %>%
group_by(State, group) %>%
summarise(lat = mean(lat), long = mean(long))
profit_with_coords <- left_join(profit_by_state, state_coords, by = "State")
profit_with_coords <- profit_with_coords %>%
group_by(State, lat, long, group) %>%
summarise(Total_Profit = sum(Profit, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(Total_Profit))
View(profit_with_coords)
#### SOLO TIRA PUNTOS
# Crear un mapa básico nuevamente con coloración
gg_map <- ggplot(data = profit_with_coords_clean) +
geom_point(aes(x = long, y = lat, color = Total_Profit), size = 3) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "Total Profit by State", color = "Profit")
