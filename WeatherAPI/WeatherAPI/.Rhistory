if (!is.null(hover_data)) {
row_id <- hover_data$pointNumber + 1
if (!(row_id %in% selected_points())) {  # Mantiene verde si está seleccionado
updatePlot(row_id, "gray")
}
}
})
# On click: change color to green and add to selected points
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
row_id <- click_data$pointNumber + 1
current_selection <- selected_points()
if (!(row_id %in% current_selection)) {
selected_points(c(current_selection, row_id))  # Añade el punto a los seleccionados
updatePlot(row_id, "green")
}
}
})
# On double-click: remove color (reset to black)
observeEvent(event_data("plotly_doubleclick"), {
dbl_click_data <- event_data("plotly_doubleclick")
if (!is.null(dbl_click_data)) {
row_id <- dbl_click_data$pointNumber + 1
current_selection <- selected_points()
selected_points(setdiff(current_selection, row_id))  # Elimina el punto de los seleccionados
updatePlot(row_id, "black")
}
})
# On brush: change color of points to green and keep them selected
observeEvent(event_data("plotly_selected"), {
brush_data <- event_data("plotly_selected")
if (!is.null(brush_data)) {
brushed_ids <- brush_data$pointNumber + 1
selected_points(c(selected_points(), brushed_ids))  # Añade los puntos seleccionados por brush
updatePlot(brushed_ids, "green")  # Aplica color verde a los puntos del brush
}
})
# Function to update plot with new colors
updatePlot <- function(selected_points, color) {
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = "black") +
xlab("Weight") +
ylab("Miles per gallon")
# Mantener los puntos seleccionados en verde
p <- p + geom_point(data = mtcars[selected_points, ], color = color, size = 3)
output$plot_click_options <- renderPlotly({
ggplotly(p) %>%
layout(dragmode = "select") # Keep selection mode, disable zoom on brush
})
}
}
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
library(shiny)
library(ggplot2)
library(plotly)
library(DT)
# Define server logic
function(input, output, session) {
# Lista reactiva para almacenar el color de cada punto
point_colors <- reactiveVal(rep("black", nrow(mtcars)))  # Inicialmente todos los puntos son negros
# Initial state: display mtcars table
output$table <- renderDT({
datatable(mtcars)
})
# Plot with interactions
output$plot_click_options <- renderPlotly({
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = point_colors()) +
xlab("Weight") +
ylab("Miles per gallon")
ggplotly(p) %>%
layout(clickmode = 'event+select', dragmode = "select") # Enable selection, disable zoom
})
# On hover: change color to gray (if not selected)
observeEvent(event_data("plotly_hover"), {
hover_data <- event_data("plotly_hover")
if (!is.null(hover_data)) {
row_id <- hover_data$pointNumber + 1
colors <- point_colors()
if (colors[row_id] != "green") {  # Solo cambia a gris si no está en verde
colors[row_id] <- "gray"
point_colors(colors)
}
}
})
# On click: change color to green and lock the selection
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
row_id <- click_data$pointNumber + 1
colors <- point_colors()
colors[row_id] <- "green"  # Cambia el punto a verde
point_colors(colors)
}
})
# On double-click: remove selection (reset to black)
observeEvent(event_data("plotly_doubleclick"), {
dbl_click_data <- event_data("plotly_doubleclick")
if (!is.null(dbl_click_data)) {
row_id <- dbl_click_data$pointNumber + 1
colors <- point_colors()
if (colors[row_id] == "green") {  # Solo restablece si está verde
colors[row_id] <- "black"  # Reinicia el color del punto a negro
point_colors(colors)
}
}
})
# On brush: change color of points to green and lock the selection
observeEvent(event_data("plotly_selected"), {
brush_data <- event_data("plotly_selected")
if (!is.null(brush_data)) {
brushed_ids <- brush_data$pointNumber + 1
colors <- point_colors()
colors[brushed_ids] <- "green"  # Cambia los puntos seleccionados por el brush a verde
point_colors(colors)
}
})
# Function to update plot colors
observe({
colors <- point_colors()
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = colors) +
xlab("Weight") +
ylab("Miles per gallon")
output$plot_click_options <- renderPlotly({
ggplotly(p) %>%
layout(dragmode = "select")  # Mantiene el modo de selección activado
})
})
}
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
library(shiny)
library(ggplot2)
library(plotly)
library(DT)
# Define server logic
function(input, output, session) {
# Lista reactiva para almacenar el color de cada punto
point_colors <- reactiveVal(rep("black", nrow(mtcars)))  # Inicialmente todos los puntos son negros
# Initial state: display mtcars table
output$table <- renderDT({
datatable(mtcars)
})
# Plot with interactions
output$plot_click_options <- renderPlotly({
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = point_colors()) +
xlab("Weight") +
ylab("Miles per gallon")
ggplotly(p) %>%
layout(clickmode = 'event+select', dragmode = "select") # Enable selection, disable zoom
})
# On hover: change color to gray (if not selected)
observeEvent(event_data("plotly_hover"), {
hover_data <- event_data("plotly_hover")
if (!is.null(hover_data)) {
row_id <- hover_data$pointNumber + 1
colors <- point_colors()
if (colors[row_id] != "green") {  # Solo cambia a gris si no está en verde
colors[row_id] <- "gray"
point_colors(colors)
}
}
})
# On click: change color to green and lock the selection
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
row_id <- click_data$pointNumber + 1
colors <- point_colors()
colors[row_id] <- "green"  # Cambia el punto a verde
point_colors(colors)
}
})
# On double-click: remove selection (reset to black)
observeEvent(event_data("plotly_doubleclick"), {
dbl_click_data <- event_data("plotly_doubleclick")
if (!is.null(dbl_click_data)) {
row_id <- dbl_click_data$pointNumber + 1
colors <- point_colors()
if (colors[row_id] == "green") {  # Solo restablece si está verde
colors[row_id] <- "black"  # Reinicia el color del punto a negro
point_colors(colors)
}
}
})
# On brush: change color of points to green and lock the selection
observeEvent(event_data("plotly_selected"), {
brush_data <- event_data("plotly_selected")
if (!is.null(brush_data)) {
brushed_ids <- brush_data$pointNumber + 1
colors <- point_colors()
colors[brushed_ids] <- "green"  # Cambia los puntos seleccionados por el brush a verde
point_colors(colors)
}
})
# Function to update plot colors
observe({
colors <- point_colors()
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = colors) +
xlab("Weight") +
ylab("Miles per gallon")
output$plot_click_options <- renderPlotly({
ggplotly(p) %>%
layout(dragmode = "select")  # Mantiene el modo de selección activado
})
})
}
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
library(shiny)
library(ggplot2)
library(plotly)
library(DT)
# Define server logic
function(input, output, session) {
# Variable reactiva para almacenar el estado de cada punto (TRUE para seleccionado, FALSE para no seleccionado)
selected_points <- reactiveVal(rep(FALSE, nrow(mtcars)))  # Todos los puntos no seleccionados al inicio
# Función para actualizar el gráfico basándose en los puntos seleccionados
update_plot <- function() {
colors <- ifelse(selected_points(), "green", "black")  # Verde si está seleccionado, negro si no
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = colors) +
xlab("Weight") +
ylab("Miles per gallon")
output$plot_click_options <- renderPlotly({
ggplotly(p) %>%
layout(clickmode = 'event+select', dragmode = "select")  # Habilitar selección y arrastre
})
}
# Mostrar tabla inicial
output$table <- renderDT({
datatable(mtcars)
})
# Llamada inicial para renderizar el gráfico
update_plot()
# Evento para manejar los clics (seleccionar puntos)
observeEvent(event_data("plotly_click"), {
click_data <- event_data("plotly_click")
if (!is.null(click_data)) {
row_id <- click_data$pointNumber + 1
current_selection <- selected_points()
current_selection[row_id] <- TRUE  # Marcar el punto como seleccionado (verde)
selected_points(current_selection)  # Actualizar la selección
update_plot()  # Actualizar el gráfico
}
})
# Evento para manejar los doble clics (quitar la selección)
observeEvent(event_data("plotly_doubleclick"), {
dbl_click_data <- event_data("plotly_doubleclick")
if (!is.null(dbl_click_data)) {
row_id <- dbl_click_data$pointNumber + 1
current_selection <- selected_points()
current_selection[row_id] <- FALSE  # Marcar el punto como no seleccionado (negro)
selected_points(current_selection)  # Actualizar la selección
update_plot()  # Actualizar el gráfico
}
})
# Evento para manejar la selección por brush
observeEvent(event_data("plotly_selected"), {
brush_data <- event_data("plotly_selected")
if (!is.null(brush_data)) {
brushed_ids <- brush_data$pointNumber + 1
current_selection <- selected_points()
current_selection[brushed_ids] <- TRUE  # Seleccionar todos los puntos del brush
selected_points(current_selection)  # Actualizar la selección
update_plot()  # Actualizar el gráfico
}
})
# Evento para manejar el hover (cambiar a gris solo si no está seleccionado)
observeEvent(event_data("plotly_hover"), {
hover_data <- event_data("plotly_hover")
if (!is.null(hover_data)) {
row_id <- hover_data$pointNumber + 1
current_selection <- selected_points()
if (!current_selection[row_id]) {  # Solo si el punto no está seleccionado
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(text = rownames(mtcars)), color = ifelse(current_selection, "green", "black")) +
geom_point(data = mtcars[row_id, ], color = "gray", size = 3) +
xlab("Weight") +
ylab("Miles per gallon")
output$plot_click_options <- renderPlotly({
ggplotly(p) %>%
layout(dragmode = "select")
})
}
}
})
}
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
shiny::runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/LABS/02_LAB/laboratorio2')
install.packages("nycflights13")
library(nyflights13)
library(lubridate)
today()
now()
make_date(year=2024, month = 10, day=07)
make_date(year=2024, month = 10, day=07)
ymd(x)
x <- "1994 October 27th"
ymd(x)
y <- "27.10.1994"
ymd(y)
library(readr)
Health_and_Personal_Care <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care.csv")
View(Health_and_Personal_Care)
library(readr)
Health_and_Personal_Care_metadata <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care_metadata.csv")
View(Health_and_Personal_Care_metadata)
library(readr)
Health_and_Personal_Care <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care.csv")
View(Health_and_Personal_Care)
library(readr)
Health_and_Personal_Care_metadata <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care_metadata.csv")
View(Health_and_Personal_Care_metadata)
library(readr)
Health_and_Personal_Care <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care.csv")
View(Health_and_Personal_Care)
library(readr)
Health_and_Personal_Care_metadata <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care_metadata.csv")
View(Health_and_Personal_Care_metadata)
library(tidyvers)
library(tidyverser)
install tidyverse
install tidyvers
install tidyverser
library(tidyverse)
library(stringr)
library(tidytext)
install.packages("tidytext")
library(tidyverse)
library(stringr)
library(tidytext)
library(lubridate)
library(stopwords)
install.packages("stopwords")
library(tidyverse)
library(stringr)
library(tidytext)
library(lubridate)
library(stopwords)
library(wordcloud)
install.packages("wordcloud")
library(tidyverse)
library(stringr)
library(tidytext)
library(lubridate)
library(stopwords)
library(wordcloud)
library(highcharter)
install.packages("highcharter")
library(tidyverse)
library(stringr)
library(tidytext)
library(lubridate)
library(stopwords)
library(wordcloud)
library(highcharter)
df <- read_csv("Health_and_Personal_Care.csv")
df <- read_csv("Health_and_Personal_Care.csv")
library(readr)
df <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care.csv")
View(df)
library(readr)
meta <- read_csv("C:/Users/miche/Downloads/Archive/Health_and_Personal_Care_metadata.csv")
View(meta)
library(tidyverse)
library(stringr)
library(tidytext)
library(lubridate)
library(stopwords)
library(wordcloud)
library(highcharter)
df %>% head()
df$text <- str_replace_all(df$text, pattern = '\\"', replacement = '')
df %>% head()
str_extract(
string = df$text[1:5],
pattern = "pain"
)
str_extract_all(
string = df$text[1:5],
pattern = "pain"
)
str_detect(
string = df$text[1:5],
pattern = "pain"
)
str_locate(
string=df$text[1:5],
pattern = "pain"
)
str_locate_all(
string=df$text[1:5],
pattern = "pain"
)
df$text[2]
str_split(
string = df$text[2],
pattern = " "
)
df$text[2]
str_split(
string = df$text[2],
pattern = boundary("word")
)
p_words <- c(
"love",
"recommend",
"like",
"enjoy",
"excellent",
"good",
"nice"
)
p_words_regex <- paste(p_words, collapse = '|')
p_words_regex <- paste(p_words, collapse = '|')
df %>%
str_detect(
string = text,
pattern = p_words_regex
) %>%
table()
str_detect(
string = df$text,
pattern = p_words_regex
)
table()
str_detect(
string = df$text,
pattern = p_words_regex
) %>%
table()
shiny::runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
shiny::runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
library(shiny)
library(httr)
library(jsonlite)
shinyServer(function(input, output) {
observeEvent(input$get_weather, {
# Your API key
api_key <- "dca6484854b475187c5ca5dadf85278f"
# Hardcoded latitude and longitude for testing
lat <- 33.44
lon <- -94.04
# Build the API URL
api_url <- paste0(
"https://api.openweathermap.org/data/3.0/onecall?lat=", lat,
"&lon=", lon,
"&appid=", api_key
)
# Make the API call
api_response <- GET(api_url)
# Check if the API call was successful
if (status_code(api_response) == 200) {
# Parse the JSON response
weather_data <- fromJSON(content(api_response, "text", encoding = "UTF-8"))
# Safely access 'current' field
if (!is.null(weather_data[["current"]])) {
current_weather <- weather_data[["current"]]
# Safely access 'temp' and 'humidity' (only)
current_temp <- current_weather[["temp"]]
current_humidity <- current_weather[["humidity"]]
# Display the temperature and humidity in the UI
output$weather_info <- renderText({
paste0(
"Current Temperature: ", current_temp, " K\n",
"Humidity: ", current_humidity, " %\n"
)
})
} else {
output$weather_info <- renderText({
"Error: 'current' weather data not found."
})
}
} else {
output$weather_info <- renderText({
"Error: Unable to fetch weather data. Please check your API key or inputs."
})
}
})
})
runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
shiny::runApp('C:/Users/miche/OneDrive/Escritorio/DATA_PRODUCT/DataProductAnalysis/WeatherAPI/WeatherAPI')
